#summary Adding HSA Support to Aparapi lambda branch (DRAFT)

Recently the HSA Foundation released their ‘Programmers Reference Manual’. This manual is  for developers wishing to write code for upcoming HSA compatible devices,  it describes the HSA Intermediate Language (HSAIL) along with its binary form (BRIG) and describes how code is expected to execute on a HSA enabled devices.

In many ways we can think of HSAIL as we do Java bytecode.  It is a common intermediate form that can be optimized at runtime to execute across a variety of future heterogeneous platforms. HSAIL will  greatly simplify the development of software taking advantage of both sequential and parallel compute solutions.

Now that the spec is out, we have started adding HSA support to the Aparapi lambda branch. We believe that HSA combined with the upcoming Java 8 feature lambda will be a natural way to express parallel algorithms which can be executed on the GPU via HSA. 

A HSA+Lambda enabled Aparapi will remove many of Aparapi's constraints.  HSA allows all of the CPU's memory to be accessed directly from code running on the GPU.  This means 

 * We no longer need to move data from the host CPU to the GPU.
 * We are no longer limited to the memory addressable from the GPU
 * We can access multi-dim arrays efficiently
 * We can access Java objects directly from the GPU. 

These are all substantial benefits.

In the existing code (early prototype) we provide access to HSA as a specific device type.  

So our ubiquitous 'squares' example will initially be written as:

{{{
int in[] = ..// 
int out[] = .../
Device.hsa().forEach(in.length, (i)->{
   out[i] = in[i]*in[i];
 });
}}}

At present access to HSA compatible devices is pretty restricted, so we propose to make use of a HSA simulator/emulator for Linux which will allow us to generate HSAIL code, and to emulate it's execution. 

To use the lambda/HSA branch you will need to build the simulator

Follow the instructions here to download and build the simulator https://github.com/HSAFoundation/Okra-Interface-to-HSAIL-Simulator 
 
You will also need a Java 8 compatible JDK, which you can get from https://jdk8.java.net/download.html

I am also using IntelliJ which has preliminary support for Java 8 features. You can download the community edition of IntelliJ from http://www.jetbrains.com/idea/
===Building the simulator on Ubuntu===

We assume you have ant, svn and g++ available because you can build other aparapi artifacts.

You will also need git, libelf-dev, libdwarf-dev, flex and cmake

{{{
$ sudo apt-get install git libelf-dev libdwarf-dev flex cmake
login...
$ git clone https://github.com/HSAFoundation/Okra-Interface-to-HSAIL-Simulator.git okra
$ cd okra
$ ant -f build-okra-sim.xml
}}}

===How to setup and test an initial build===

Assuming you have built okra in {{{/home/gfrost/okra}}}

Assuming your Java8 JDK is in {{{/home/gfrost/jdk1.8.0}}}

Assuming your aparapi svn trunk is {{{/home/gfrost/aparapi}}}

{{{
$ export JAVA_HOME=/home/gfrost/jdk1.8.0
$ export OKRA=/home/gfrost/okra
$ export PATH=${PATH}:${JAVA_HOME}/bin:${OKRA}/dist/bin
$ java -version
java version "1.8.0-ea"
Java(TM) SE Runtime Environment (build 1.8.0-ea-b94)
Java HotSpot(TM) 64-Bit Server VM (build 25.0-b36, mixed mode)
$ cd /home/gfrost/aparapi/branches/lambda
$ ant 
$ export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${OKRA}/dist/bin
$ java -agentpath:com.amd.aparapi.jni/dist/libaparapi_x86_64.so -cp com.amd.aparapi/dist/aparapi.jar:${OKRA}/dist/okra.jar hsailtest.Squares
$
}}}


    