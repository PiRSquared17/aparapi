#summary Adding Lambdas to Aparapi

I have been playing with Java 8 lambdas [http://openjdk.java.net/projects/lambda/ here] preview for a couple of days and tinkering with a possible Aparapi API. 

I have created a branch called !MockLambdas to track my ideas. [http://code.google.com/p/aparapi/source/browse/#svn%2Fbranches%2FMockLambda Here] is the link to the source tree I am playing with.

You will need to get the latest binary build of lambdas to make the code in this branch work. The lambda preview can be found [http://jdk8.java.net/lambda/ here].

Then hack the {{{lambda.bat}}} file in the root dir to point to your installation. All other bat files in !MockLambdas use 'lambda.bat' so you should only have to hack one file. 

Then 
  {{{build.bat}}}

and
  {{{run.bat}}} 

Should do what you expect ;)

----

At present I have a simple JTP style implementation like this

{{{
Aparapi.forEach(int range, Aparapi.LambdaI lambda);
}}}

I created inner interface 'SAM' types called LambdaI within the Aparapi helper class.  So we can use Java 8 lambda's 

So you can use 

{{{
int in[] = ..// 
int out[] = .../
Aparapi.forEach(in.length, (i)->{
   out[i] = in[i]*in[i];
 });
}}}

Instead of

{{{
int in[] = ..// 
int out[] = .../
Aparapi.forEach(in.length, new Aparapi.LambdaI(){
   public void run(int i){
       out[i] = in[i]*in[i];
   }
 });
}}}