#summary How to setup a Linux HSA machine for testing HSA enabled Aparapi
#sidebar SettingUpLinuxHSAMachineForAparapiSidebar

<wiki:comment>
<img src="http://poojachopragoel.com/wp-content/uploads/2013/02/coming-soon.jpg" width="200" height="200"/>

=Incomplete - Under construction! move along :)
</wiki:comment>
= Introduction =

Now that HSA hardware is generally available I figured it was time to describe how to setup a HSA enabled Linux platform so that it can run Aparapi. 

Here is a nice introduction to HSA http://developer.amd.com/resources/heterogeneous-computing/what-is-heterogeneous-system-architecture-hsa/

But for Aparapi users the main advantage is that we are no longer limited to the GPU memory for running GPU tasks.  Also because the CPU and the GPU can both see the same memory (the Java heap) Aparapi code can now access Java objects directly.  This removes a number of Aparapi constraints.  So more of your code can now run on the GPU.

== Hardware Required ==

These instructions were based on my experience setting up a platform using the following hardware.
|| *Component* || *Suggested*||
||APU||AMD A10-7850K APU http://www.amd.com/us/products/desktop/processors/a-series/Pages/a-series-apu.aspx||
||Motherboard||ASUS A88X-PRO http://www.asus.com/Motherboards/A88XPRO ||
||Memory||G.SKILL Ripjaws X Series 16GB (2 x 8GB) 240-Pin DDR3 SDRAM DDR3 2133||

== Software Required ==
We also have some software dependencies. 

|| *Component* || *Suggested*||
||Java 8 JDK|| http://www.oracle.com/technetwork/java/javase/downloads/ea-jsp-142245.html||
||Ubuntu 13.10 64-bit edition|| http://www.ubuntu.com/download ||
||Ubuntu 13.10 64-bit edition HSA enabled kernel image|| See instructions below ||
||OKRA HSA enabled runtime||  See instructions below  ||

The hope is that the list of HW/SW support widens, but for early adopters this is the set of HW/SW we have been testing with.

= Setting up your System =

== Configure your BIOS to support IOMMU ===

Once you have built your {{{AMD A10-7850K APU}}} based system you should make sure that your system is configured to use IOMMU. 

Remember HSA allows the GPU and CPU cores to share the same memory. IOMMU  needs to be enabled for this. 

For the recommended ASUS board above you will need to make sure that your BIOS is updated to version 0802. Here is a direct link to the 0802 version of the BIOS from ASUS's site as of 2/28/2014. 

http://dlcdnet.asus.com/pub/ASUS/mb/SocketFM2/A88X-PRO/A88X-PRO-ASUS-0802.zip

Once you have the latest BIOS you will need to enable IOMMU in the system BIOS. This is done using the "CPU Configuration" screen under "Advanced Mode" and then enabling IOMMU.

==Installing Ubuntu 13.10 ==
Once you have your BIOS setup you need to install Ubuntu http://www.ubuntu.com/download

==Installing HSA enabled kernel + driver ==
Until all of the HSA drivers and features are available in *stock* linux and have been pulled down into Ubuntu distro we will need a special HSA enabled kernel image.  

A Ubuntu compatible kernel can be pulled from github

{{{
$ git clone https://github.com/HSAFoundation/Linux-HSA-Drivers-And-Images-AMD.git
}}}

Or you can pull the zip and unzip using curl if you don't have git

{{{
$ curl -L https://github.com/HSAFoundation/Linux-HSA-Drivers-And-Images-AMD/archive/master.zip > drivers.zip
$ unzip drivers.zip
}}}

This will create the following subdir on your machine
<pre>
Linux-HSA-Drivers-And-Images-AMD/
   LICENSE
   README.md
   ubuntu12.10-based-alpha1/
       xorg.conf
       linux-image-3.13.0-kfd+_3.13.0-kfd+-2_amd64.deb
             
</pre>

From here we can install our new image and setup the HSA KFD (the driver for HSA)and reboot to the new kernel.

{{{
$ cd Linux-HSA-Drivers-And-Images-AMD
$ echo  "KERNEL==\"kfd\", MODE=\"0666\"" | sudo tee /etc/udev/rules.d/kfd.rules 
$ sudo dpkg -i ubuntu12.10-based-alpha1/linux-image-3.13.0-kfd+_3.1....
$ sudo reboot
}}}

==Installing OKRA RT== 

Now we need a runtime for executing HSAIL code. We share common infrastructure used by our sister OpenJDK project called *Sumatra*. Both Aparapi and Sumatra use OKRA to execute HSAIL code on a HSA enabled platform. 

We can get the latest version using of OKRA (Offloadable Kernel Runtime API) from another HSA foundation repository. 

{{{
$ git clone https://github.com/HSAFoundation/Okra-Interface-to-HSA-Device.git
}}}

or if you prefer curl/unzip

{{{
$ curl -L https://github.com/HSAFoundation/Okra-Interface-to-HSA-Device/archive/master.zip > okra.zip
$ unzip okra.zip
}}}
This will create the following dir structure. 

<pre>
Okra-Interface-to-HSA-Device/
   README.md
   okra/
      README
      dist/
         okra.jar
         bin/
            libamdhsacl64.so
            libnewhsacore64.so
            libokra_x86_64.so
         include/
            common.h
            okraContext.h
             
      samples/
         dist/
           Squares
           Squares.hsail
         runSquares.sh 
</pre>

OKRA offers a C API (for those that are so inclined ;) ) as well as a java jar file which contains JNI wrappers.

== Sanity check your HSA and OKRA install ==

So to sanity check your install you can run a small sample app (binary) 
{{{
$ cd okra/samples
$ sh runSquares.sh
}}}

If everything is OK this should run the C Squares test app. 

Congratulations, you have executed your first HSA enabled app.


== Getting OpenCL headers and libraries ==

We need OpenCL headers and libraries to build Aparapi (remember we still support OpenCL). 

My recommendation is to download *{{{AMD-APP-SDK-v2.9-lnx64.tgz}}}* from  http://developer.amd.com/tools-and-sdks/heterogeneous-computing/amd-accelerated-parallel-processing-app-sdk/downloads
 and then extracting the libraries and headers. 

Note that we have nested zipped jars in this archive.

{{{
$ gunzip AMD-APP-SDK-v2.9-lnx64.tgz
$ tar xvf AMD-APP-SDK-v2.9-lnx64.tar
$ gunzip AMD-APP-SDK-v2.9-RC-lnx64.tgz
$ tar xvf AMD-APP-SDK-v2.9-RC-lnx64
}}} 

Note where *AMD-APP-SDK-v2.9-RC-lnx64* is located, you need this in the following step. 

== Pulling the HSA enabled Aparapi branch and building ==

Now we can pull the Aparapi lambda/HSA branch from SVN 
{{{
$ svn checkout https://aparapi.googlecode.com/svn/branches/lambda aparapi-lambda
}}}

If you are familiar with Aparapi structure then this tree should not be _that much of a surprise_ but there are a few subtle changes. 

Specifically the build system has been changed to support OKRA, Aparapi JNI code is provided as a Java agent and the execution scripts all refer to *{{{${APARAPI_HOME}/env.sh}}}* to setup a reasonable execution environment.

You will need to edit *{{{env.sh}}}* and make sure that *{{{APARAPI_HOME}}}*,  *{{{OKRA_HOME}}}*, *{{{OCL_HOME}}}* and *{{{JAVA_HOME}}}* correctly.

Here are how I set my vars. 

|| *environment variable* || * value * ||
|| JAVA_HOME || /usr/lib/jvm/java-7-openjdk-amd64/ ||
|| OCL_HOME || /home/${LOGNAME}/AMD-APP-SDK-v2.9-RC-lnx64||
|| APARAPI_HOME || /home/${LOGNAME}/aparapi-lambda ||
|| OKRA_HOME || /home/${LOGNAME}/okra ||

Now you should source *{{{env.sh}}}*

{{{
$ cd /home/${LOGNAME}/aparapi-lambda
$ . env.sh
}}}
 
And now you should be good to go!

{{{
$ ant
}}}

If you get any problems check the env vars first.

If all is well you should be able to run some samples. 

{{{
$ cd samples/mandel
$ sh hsailmandel.sh 
}}}

 
 