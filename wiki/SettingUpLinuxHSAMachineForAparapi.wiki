#summary How to setup a Linux HSA machine for testing HSA enabled Aparapi

=Incomplete - Under construction! move along

= Introduction =

Now HSA hardware is generally available I figured it was time to describe how to setup a HSA enabled Linux platform so that it can run Aparapi. 

These instructions were based on my experience setting up a platform using the following hardware.
|| *Component* || *Suggested*||
||APU||AMD A10-7850K APU||
||Motherboard||ASUS A88X-PRO http://www.asus.com/Motherboards/A88XPRO ||
||Memory||G.SKILL Ripjaws X Series 16GB (2 x 8GB) 240-Pin DDR3 SDRAM DDR3 2133||

We also have some software dependencies. 

|| *Component* || *Suggested*||
||Java 8 JDK|| http://www.oracle.com/technetwork/java/javase/downloads/ea-jsp-142245.html||
||Ubuntu 13.10|| http://www.ubuntu.com/download ||
||Ubuntu HSA enabled kernel image|| See instructions below ||
||OKRA HSA enabled runtime||  See instructions below  ||

Our hope is that the list of HW/SW support widens, but for early adopters this is the set of HW/SW we have been testing with.

= Setting up the hardware =

HSA enablement requires that your BIOS has *IOMMUv2* enabled.  Remember HSA allows the GPU and CPU cores to access main memory at the same time (no more memory buffer transfers!). IOMMUv2 feature is what allows this sharing of memory to happen. Each BIOS is different but for the motherboard above. You will need to set the option

{{{ add info here }}}

==Installing Ubuntu 13.10 ==
Once you have your BIOS setup you need to install Ubuntu http://www.ubuntu.com/download

==Installing HSA enabled kernel + driver ==
Until all of the HSA drivers and features are available in *stock* linux and have been pulled down into Ubuntu distro we will need a special HSA enabled kernel image.  

A Ubuntu compatible kernel can be pulled from github

{{{
$ git clone https://github.com/HSAFoundation/Linux-HSA-Drivers-And-Images-AMD.git
}}}

This will create the following subdir on your machine
<pre>
Linux-HSA-Drivers-And-Images-AMD/
   LICENSE
   README.md
   ubuntu12.10-based-alpha1/
       xorg.conf
       linux-image-3.13.0-kfd+_3.13.0-kfd+-2_amd64.deb
             
</pre>

From here we can install our new image and setup the HSA KFD (the driver for HSA)and reboot to the new kernel.

{{{
$ cd Linux-HSA-Drivers-And-Images-AMD
$ echo  "KERNEL=\"kfd\", MODE=\"0666\"" | sudo tee /etc/udev/rules.d/kfd.rules 
$ sudo dpkg -i ubuntu12.10-based-alpha1/linux-image-3.13.0-kfd+_3.1....
$ sudo reboot
}}}

==Installing OKRA RT== 

Now we need a runtime for executing HSAIL code. We share common infrastructure used by our sister OpenJDK project called *Sumatra*. Both Aparapi and Sumatra use OKRA to execute HSAIL code on a HSA enabled platform. 

We can get the latest version using of OKRA (Offloadable Kernel Runtime API) from another HSA foundation repository. 

{{{
$ git clone https://github.com/HSAFoundation/Okra-Interface-to-HSA-Device.git
}}}

This will create the following dir structure. 

<pre>
Okra-Interface-to-HSA-Device/
   README.md
   okra/
      README
      dist/
         okra.jar
         bin/
            libamdhsacl64.so
            libnewhsacore64.so
            libokra_x86_64.so
         include/
            common.h
            okraContext.h
             
      samples/
         dist/
           Squares
           Squares.hsail
         runSquares.sh 
</pre>

OKRA offers a C API (for those that are so inclined ;) ) as well as a java jar file which contains JNI wrappers.

== Sanity check your HSA and OKRA install ==

So to sanity check your install you can run a small sample app (binary) 
{{{
$ cd okra/samples
$ sh runSquares.sh
}}}

If everything is OK this should run the C Squares test app. 

Congratulations, you have executed your first HSA enabled app.
== Installing the HSA enabled Aparapi branch ==

Now we can pull the Aparapi lambda/HSA branch from SVN 
{{{
$ svn checkout https://aparapi.googlecode.com/svn/branches/lambda aparapi-lambda
}}}

If you are familiar with Aparapi structure then this tree should not be _that much of a surprise_ but there are a few subtle changes. 

Specifically the build system has been changed to support OKRA, Aparapi JNI code is provided as a Java agent and the execution scripts all refer to *{{{${APARAPI_HOME}/env.sh}}}* to setup a reasonable execution environment.

You will need to edit *{{{env.sh}}}* and make sure that *{{{APARAPI_HOME}}}*,  *{{{OKRA_HOME}}}* and *{{{JAVA_HOME}}}* are all set correctly. 


 